head	1.11;
access;
symbols;
locks
	rjs:1.11; strict;
comment	@// @;


1.11
date	2015.05.19.20.41.49;	author rjs;	state Exp;
branches;
next	1.10;

1.10
date	2015.05.19.20.17.22;	author rjs;	state Exp;
branches;
next	1.9;

1.9
date	2015.03.06.13.47.53;	author rjs;	state Exp;
branches;
next	1.8;

1.8
date	2015.03.06.01.59.17;	author rjs;	state Exp;
branches;
next	1.7;

1.7
date	2015.03.05.16.59.29;	author rjs;	state Exp;
branches;
next	1.6;

1.6
date	2015.03.04.20.27.41;	author rjs;	state Exp;
branches;
next	1.5;

1.5
date	2015.03.04.00.40.51;	author rjs;	state Exp;
branches;
next	1.4;

1.4
date	2015.03.02.20.39.49;	author rjs;	state Exp;
branches;
next	1.3;

1.3
date	2015.02.11.22.00.26;	author rjs;	state Exp;
branches;
next	1.2;

1.2
date	2015.02.11.17.57.30;	author rjs;	state Exp;
branches;
next	1.1;

1.1
date	2015.02.09.21.38.10;	author rjs;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@
#include "dados_daFunceme.hpp"
#include "indices_deChuva.hpp"
#include "postoFunceme.hpp"

#include <iostream>
#include <cstdlib>
#include <map>

using namespace std;

int exec1( int argc, char **argv )
{
	dados_daFunceme Funceme;
	unsigned int Dia, Mes, Ano, Identidade;
	Ano = atoi( argv[1] );
	Mes = atoi( argv[2] );
	Dia = atoi( argv[3] );
	Identidade = atoi( argv[4] );
	tipoPrecipitacao tp = 
		Funceme.getTipoPrecipitacao( Ano, Mes, Dia, Identidade );
	
	if( tp == ID_INVALIDO )
		cout << "Posto inexistente\n";

	if( tp	== ANO_SEM_INFO )
		cout << "Ano sem informaçao\n";

	if( tp	== MES_SEM_INFO )
		cout << "Mes sem informaçao\n";

	if( tp	== DIA_SEM_INFO )
		cout << "Dia sem informaçao\n";

	if( tp	== DIA_INVALIDO )
		cout << "Dia Inválido\n";

	if( tp	== MES_INVALIDO )
		cout << "Mes Inválido\n";

	if( tp	== INFORMADA ){
		cout << "Precipitação Informada\n";
		cout << "Valor: ";
		cout << Funceme.getValorPrecipitacao( Ano, Mes, Dia, Identidade ) << "\n";
	}
	return 0;
}

int exec2( int argc, char **argv )
{
	dados_daFunceme Funceme;
	unsigned int Dia, Mes, Ano;
	double x, y;
	double valorPrecipitacao;
	Ano = atoi( argv[1] );
	Mes = atoi( argv[2] );
	Dia = atoi( argv[3] );
	x = atof( argv[4] );
	y = atof( argv[5] );	

	valorPrecipitacao = Funceme.aproximarIndice( Ano, Mes, Dia, x, y );

	cout << "\nValor Aproximado: " << valorPrecipitacao << "\n\n";

	return 0;
}

int exec3( int argc, char **argv )
{
	cout << ANO_SEM_INFO << "\n";
	cout << MES_SEM_INFO << "\n";
	cout << DIA_SEM_INFO << "\n";
	cout << DIA_INVALIDO << "\n";
	cout << MES_INVALIDO << "\n";
	cout << ID_INVALIDO << "\n";
	cout << INFORMADA << "\n";
	cout << INDEFINIDA << "\n";

	return 0;
}

int exec4( int argc, char **argv )
{
	map<tipoPrecipitacao, string> tipoInformacao;
	mapTipoPrecipitacao( tipoInformacao );

	dados_daFunceme Funceme;
	unsigned int Dia, Mes, Ano;
	double x, y;
	double valorPrecipitacao;
	Ano = atoi( argv[1] );
	Mes = atoi( argv[2] );
	Dia = atoi( argv[3] );
	x = atof( argv[4] );
	y = atof( argv[5] );
	vector<chuva_ePosto> Postos;

	valorPrecipitacao = Funceme.aproximarIndice( Ano, Mes, Dia, x, y, Postos );
	vector<chuva_ePosto>::iterator Iter;
	cout << "\nPostos na distancia desejada\n\n";
	for( Iter=Postos.begin(); Iter!=Postos.end(); ++Iter ){
		cout << "Cidade:" << Iter->Cidade << "\n";
		cout << "Posto:" << Iter->nomePosto << "\n";
		cout << "Identidade:" << Iter->Identidade << "\n";
		cout << "Distancia:" << Iter->Distancia << "\n";
		cout << "Ano: " << Iter->Ano << "\n";
		cout << "Mes: " << Iter->Mes << "\n";
		cout << "Dia: " << Iter->Dia << "\n";
		cout << "Tipo: " << tipoInformacao[Iter->Tipo] << "\n";
		if( Iter->Tipo == INFORMADA )
			cout << "Precipitacao: " << Iter->Valor << "\n";
		cout << "\n";
	}

	cout << "\nValor Aproximado: " << valorPrecipitacao << "\n\n";
	cout << endl;

	return 0;
}

int main( int argc, char **argv )
{
	exec4( argc, argv );

	return 0;
}
@


1.10
log
@*** empty log message ***
@
text
@d100 1
a100 1
	cout << "\n\nPostos na distancia desejada\n";
d105 1
@


1.9
log
@*** empty log message ***
@
text
@d8 1
d20 1
a20 1
	dados_daFunceme::tipoPrecipitacao tp = 
d23 1
a23 1
	if( tp == dados_daFunceme::ID_INVALIDO )
d26 1
a26 1
	if( tp	== dados_daFunceme::ANO_SEM_INFO )
d29 1
a29 1
	if( tp	== dados_daFunceme::MES_SEM_INFO )
d32 1
a32 1
	if( tp	== dados_daFunceme::DIA_SEM_INFO )
d35 1
a35 1
	if( tp	== dados_daFunceme::DIA_INVALIDO )
d38 1
a38 1
	if( tp	== dados_daFunceme::MES_INVALIDO )
d41 1
a41 1
	if( tp	== dados_daFunceme::INFORMADA ){
d68 52
d122 1
a122 1
	exec2( argc, argv );
@


1.8
log
@*** empty log message ***
@
text
@d62 1
a62 1
	cout << "Valor Aproximado: " << valorPrecipitacao << "\n";
@


1.7
log
@*** empty log message ***
@
text
@d11 1
a11 1
int main( int argc, char **argv )
d45 26
@


1.6
log
@*** empty log message ***
@
text
@d40 1
a40 1
	if( tp	== dados_daFunceme::INFORMADA )
d42 3
a44 1

@


1.5
log
@*** empty log message ***
@
text
@d6 3
d14 28
a42 1
	Funceme.escreverDados();
@


1.4
log
@*** empty log message ***
@
text
@d2 4
d10 1
d12 1
@


1.3
log
@*** empty log message ***
@
text
@a1 4
#include "poligono_tovtk.hpp"

#include <iostream>

a5 6
	poligono_toVtk Poli;

	Poli.ceara_toVtk();
	Poli.municipios_toVtk();
	Poli.postos_toVtk();
	Poli.triangle_toVtk();
@


1.2
log
@*** empty log message ***
@
text
@d15 1
@


1.1
log
@Initial revision
@
text
@d14 1
@
